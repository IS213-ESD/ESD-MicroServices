version: "1.0"

networks:
  delectric-network:
    driver: bridge

volumes:
  delectricdb-vol:
  pgdata: 
  rabbitmq_data:

services:
  #######################################
  # Mysql: The database used by all
  #######################################
  Delectric-mysql:
    image: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_USER_PASSWORD}
    volumes:  
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./init-scripts/my.cnf:/etc/mysql/conf.d/my.cnf # Set config file to adjust timezone to SGT
    networks:
      - delectric-network
  
  #######################################
  # Charging Station Microservice
  #######################################
  delectric-charging-station:
    build:
      context: ./charging-station
    ports:
      - "5001:5001"
    depends_on:
      - Delectric-mysql
    environment:      
      - dbURL=mysql+mysqlconnector://${DB_USER}:${DB_USER_PASSWORD}@Delectric-mysql:3306/
    networks:
      - delectric-network

  #######################################
  # User Microservice
  #######################################
  user:
    build:
      context: ./user
    ports:
      - "5002:5001"
    depends_on:
      - Delectric-mysql
    environment:      
      - dbURL=mysql+mysqlconnector://${DB_USER}:${DB_USER_PASSWORD}@Delectric-mysql:3306/
      - FIREBASE_API=${FIREBASE_API}
      - AUTHDOMAIN=${AUTHDOMAIN}
      - PROJECTID=${PROJECTID}
      - STORAGEBUCKET=${STORAGEBUCKET}
      - MESSAGINGSENDERID=${MESSAGINGSENDERID}
      - APPID=${APPID}
    networks:
      - delectric-network

  #######################################
  # User Notification Service
  #######################################
  usernotification:
    build:
      context: ./usernotification
    ports:
      - "5003:5001"
    environment:    
      ACCOUNT_SID: '${ACCOUNT_SID}'
      AUTH_TOKEN: '${AUTH_TOKEN}'
      TWILIO_NUM: '${TWILIO_NUM}'
    networks:
      - delectric-network

  #######################################
  # Complex-Micro Service
  #######################################
  delectric-complex-handle-bookings:
    build:
      context: ./complex/handle-bookings
    ports:
      - "5101:5001"
    depends_on:
      - Delectric-mysql
      - user
      - delectric-charging-station
    environment:      
      - dbURL=mysql+mysqlconnector://${DB_USER}:${DB_USER_PASSWORD}@Delectric-mysql:3306/
    networks:
      - delectric-network

  #######################################
  # Complex-Micro Service
  #######################################
  delectric-rabbitmq:
      image: rabbitmq:3.8-management
      ports:
        - "5672:5672" # RabbitMQ port
        - "15672:15672" # RabbitMQ management UI port
      networks:
      - delectric-network
      volumes:
        - rabbitmq_data:/var/lib/rabbitmq # Persist RabbitMQ data

  #######################################
  # IOT Charger Microservice
  #######################################
  delectric-iot-charger:
    build:
      context: ./iot-charger
    ports:
      - "5005:5002"
    depends_on:
      - Delectric-mysql
    environment:      
      - dbURL=mysql+mysqlconnector://${DB_USER}:${DB_USER_PASSWORD}@Delectric-mysql:3306/ 
    networks:
      - delectric-network

  #######################################
  # Payment Microservice
  #######################################
  delectric-payment:
    build:
      context: ./payment
    ports:
      - "5004:5003"
    depends_on:
      - Delectric-mysql
    environment:      
      - dbURL=mysql+mysqlconnector://${DB_USER}:${DB_USER_PASSWORD}@Delectric-mysql:3306/ 
      - STRIPE_API_KEY=${STRIPE_API_KEY}
    networks:
      - delectric-network

  # #######################################
  # #          KONG CREATION              #
  # #######################################
  # #######################################
  # # Postgres: The database used by Kong
  # #######################################
  # kong-database:
  #   image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
  #   platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
  #   restart: always
  #   networks:
  #     - delectric-network
  #   environment:
  #     POSTGRES_DB: kong
  #     POSTGRES_USER: kong
  #     POSTGRES_PASSWORD: password
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data

  # #######################################
  # # Kong database migration
  # #######################################
  # kong-migration:
  #   image: kong/kong-gateway:3.2.2.5 # tested 20231101
  #   platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
  #   command: "kong migrations bootstrap"
  #   restart: on-failure
  #   networks:
  #     - delectric-network
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: password
  #   depends_on:
  #     - kong-database

  # #######################################
  # # Kong: The API Gateway
  # #######################################
  # kong:
  #   image: kong/kong-gateway:3.2.2.5 # tested 20231101
  #   platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
  #   restart: always
  #   networks:
  #     - delectric-network
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: password
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #     KONG_ADMIN_GUI_URL: http://localhost:8002
  #   depends_on:
  #     - kong-migration
  #   ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
  #     - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
  #     - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
  #     - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
  #     - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
  #     - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
  #     - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
  #     - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
  #     - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
  #     - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
  #     - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.

  # rabbitmq:
  #   image: "rabbitmq:latest"
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   hostname: rabbitmq

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  # rabbitmq:
  #   image: rabbitmq:3-management
  #   restart: always
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes: 
  #     - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
  #     - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
  #     - rabbitmq_data:/var/lib/rabbitmq

  # web:
  #   build: .
  #   command: flask run --host=0.0.0.0
  #   volumes:
  #     - .:/code
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #     - rabbitmq
  #   environment:
  #     - FLASK_APP=app.py
  #     - FLASK_ENV=development
  #     - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/

  # celery_worker:
  #   build: 
  #     context: ./iot-charger
  #   command: celery -A app.celery worker --loglevel=info
  #   environment:
  #     - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
  #     - CELERY_RESULT_BACKEND=rpc://
  #   depends_on:
  #     - rabbitmq
  #   networks:
  #     - delectric-network
